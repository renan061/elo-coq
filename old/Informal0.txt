
- N represents a natural number
- x represents a string (an id)
- uppercase letters (excluding N), such as T, represent types
- lowercase letters, such as t, represent terms
- v represents a term that is a value
- ad stands for memory address (a natural number)
- tid stands for thread id (a natural number)

--------------------------------------------------------------------------------

tm  : nil
    | N                         // number
    | &N                        // location
    | new t                     // new location
    | *t                        // load
    | t1 := t2                  // assignment

typ : Void
    | Num
    | *T      // mutable reference

effect : Alloc (ad : N) t
       | Load  (ad : N) t
       | Store (ad : N) t

ceffect : CAlloc (tid : N) (ad : N) t
        | CLoad  (tid : N) (ad : N) t
        | CStore (tid : N) (ad : N) t

value : nil
      | N
      | &N

--------------------------------------------------------------------------------

STEP      t --[eff]--> t'

t   = term
eff = effect


    ST-New     ___________________________________
                new v    --[Alloc ad v]-->    &ad


    ST-Load    _________________________________
                *(&ad)    --[Load ad t]-->    t


    ST-Asg     ______________________________________
                &ad := v    --[Store ad v]-->    nil


--------------------------------------------------------------------------------

CONCURRENT STEP      m / ths ==[ceff]==> m' / ths'

m    = memory
ths  = threads
ceff = concurrent effect


                 ths[i] --[Alloc (length m) v]--> t
    CST-Alloc   _______________________________________________________________
                 m / ths ==[CAlloc i (length m) v]==> (m ++ v) / (i := t; ths)


                 ths[i] --[Load ad m[ad]]--> t
    CST-Load    ___________________________________________________
                 m / ths ==[CLoad i ad m[ad]]==> m / (i := t; ths)


                 ths[i] --[Store ad v]--> t
    CST-Store   ___________________________________________________________
                 m / ths ==[CStore i ad v]==> (ad := v; m) / (i := t; ths)


--------------------------------------------------------------------------------

TYPES      mt / Gamma |-- t is T

mt    = memory types
Gamma = context
t     = term
T     = type


    T-Nil       ____________________________
                 mt / Gamma |-- nil is Void


    T-Num       _________________________
                 mt / Gamma |-- N is Num


    T-Loc       ______________________________
                 mt / Gamma |-- &ad is mt[ad]


                 mt / Gamma |-- t is T
    T-New       ______________________________
                 mt / Gamma |-- (new t) is *T


                 mt / Gamma |-- t is *T
    T-Load      ________________________
                 mt / Gamma |-- *t is T


                 mt / Gamma |-- l is *T
                 mt / Gamma |-- r is T
    T-Asg       _________________________________
                 mt / Gamma |-- (l := r) is Void
